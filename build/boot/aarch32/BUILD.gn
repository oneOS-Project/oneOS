# Copyright 2021 Nikita Melekhin. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

boot_c_flags = [
  "-ffreestanding",
  "-Werror",
  "-Wno-address-of-packed-member",
]
boot_asm_flags = []
boot_ld_flags = []

if (kernel_symbols) {
  boot_c_flags += [ "-ggdb" ]
}

boot_c_flags += [
  "-fno-builtin",
  "-march=armv7-a",
  "-mfpu=neon-vfpv4",
  "-mfloat-abi=soft",
  "-fno-pie",
]
boot_asm_flags += [
  "-march=armv7-a",
  "-mfpu=neon-vfpv4",
  "-mfloat-abi=softfp",
  "-mcpu=cortex-a15",
]
boot_ld_flags += [ "-nostdlib" ]

if (host == "gnu") {
  boot_ld_flags += [
    "-nostdinc",
    "-nodefaultlibs",
    "-nostartfiles",
    "-lgcc",
  ]
}

if (host == "llvm") {
  boot_ld_flags += [
    "--oformat",
    "elf32-littlearm",
    rebase_path("//toolchains/llvm_runtime/11.1.0/libclang_rt.builtins-arm.a",
                root_build_dir),
  ]
}

config("boot_flags") {
  cflags = boot_c_flags
  asmflags = boot_asm_flags
  ldflags = boot_ld_flags
  defines = [ "opuntiaOS_kernel" ]
}

linker_script =
    rebase_path("//build/boot/$target_cpu/boot_link.ld", root_build_dir)

# Use a strange __EMPTY_PATH_, empty string can't be passed as an arg.
path_to_bins = "__EMPTY_PATH_"
if (host == "llvm") {
  path_to_bins = llvm_bin_path
}

devtree_compile_script_args = [
  rebase_path("//firmware/$target_cpu/$target_board.odt", root_build_dir),
  rebase_path("$root_out_dir/firmware/$target_board.obt", root_build_dir),
  "$target_cpu",
  "$target_board",
  "$host",
  "$path_to_bins",
]

action("devtree_compile") {
  script = "//build/kernel/devtree_compile.py"
  inputs = [ "//firmware/$target_cpu/$target_board.odt" ]
  outputs = [
    "$root_out_dir/firmware/$target_board.obt",
    "$root_out_dir/firmware/$target_board.obto",
  ]
  args = devtree_compile_script_args
}

executable("bootarm") {
  deps = [ ":devtree_compile" ]
  output_name = "bootarm.bin"
  sources = [
    "//boot/aarch32/drivers/pl181.c",
    "//boot/aarch32/drivers/uart.c",
    "//boot/aarch32/entry.s",
    "//boot/aarch32/hw/ram.c",
    "//boot/aarch32/main.c",
    "//boot/aarch32/start_kernel.s",
    "//boot/aarch32/vmm/vmm.c",
    "//boot/libboot/crypto/sha256.c",
    "//boot/libboot/crypto/signature.c",
    "//boot/libboot/crypto/uint2048.c",
    "//boot/libboot/crypto/validate.c",
    "//boot/libboot/devtree/devtree.c",
    "//boot/libboot/elf/elf_lite.c",
    "//boot/libboot/fs/ext2_lite.c",
    "//boot/libboot/log/log.c",
    "//boot/libboot/mem/alloc.c",
    "//boot/libboot/mem/mem.c",
  ]

  include_dirs = [ "//boot" ]

  configs = [ ":boot_flags" ]

  ldflags = [
    rebase_path("$root_out_dir/firmware/$target_board.obto", root_build_dir),
    "-T$linker_script",
  ]
}
